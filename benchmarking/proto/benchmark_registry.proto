// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package ml_actions.benchmarking;

import "buf/validate/validate.proto";
import "google/protobuf/wrappers.proto";
import "benchmarking/proto/common/stat.proto";

// Defines the direction of improvement for a metric.
enum ImprovementDirection {
  IMPROVEMENT_DIRECTION_UNSPECIFIED = 0;

  // Indicates that a smaller value is better (e.g., latency, error rate).
  LESS = 1;

  // Indicates that a larger value is better (e.g., throughput, accuracy).
  GREATER = 2;
}

// Defines the static threshold analysis rules for a given statistic.
message ComparisonSpec {
  // REQUIRED: The expected baseline value.
  google.protobuf.DoubleValue baseline = 1 [(buf.validate.field).required = true];
  
  // REQUIRED: The allowed percent deviation from the baseline.
  google.protobuf.DoubleValue threshold = 2 [(buf.validate.field).required = true];

  // Optional: The direction of improvement for this statistic.
  ImprovementDirection improvement_direction = 3;
}

// Defines a specific statistic to compute.
message StatSpec {
  // REQUIRED: The statistic to compute from the raw data.
  Stat stat = 1 [(buf.validate.field).enum = {not_in: [0]}];

  // Optional: Enable and configure static threshold analysis.
  optional ComparisonSpec comparison = 2;
}

// Defines a specific metric to be tracked.
message MetricSpec {
  // REQUIRED: The name of the metric. This MUST exactly match the
  // tag used when logging to TensorBoard (e.g., "wall_time").
  string name = 1 [(buf.validate.field).string.min_len = 1];

  // REQUIRED: The unit of measurement (e.g., "ms", "percent", "gb").
  string unit = 2 [(buf.validate.field).string.min_len = 1];

  // REQUIRED: A list of statistics to compute and optionally validate
  // for this metric.
  repeated StatSpec stats = 3 [(buf.validate.field).repeated.min_items = 1];
}

// Defines the target hardware platform category.
enum HardwareCategory {
  HARDWARE_CATEGORY_UNSPECIFIED = 0;

  // -- CPUs --
  CPU_X86 = 1;
  CPU_ARM64 = 2;

  // -- GPUs --
  GPU_L4 = 3;
  GPU_A100 = 4;
  GPU_H100 = 5;
  GPU_B200 = 6;

  // -- TPUs --
  TPU_V4 = 7;
  TPU_V5E = 8;
  TPU_V6E = 9;
}

// Defines the target operating system.
enum OS {
  OS_UNSPECIFIED = 0;
  LINUX = 1;
  WINDOWS = 2;
}

// Defines the required hardware resources.
message ResourceSpec {
  // Optional: Operating system required.
  OS os = 1;

  // Optional: Minimum number of vCPUs required.
  int32 min_vcpu_count = 2 [(buf.validate.field).int32.gte = 0];

  // Optional: The exact number of GPUs required.
  int32 gpu_count = 3 [(buf.validate.field).int32.gte = 0];

  // Optional: The required TPU topology (e.g., "2x2", "1x1").
  string tpu_topology = 4;
}

// Defines the workflow type.
enum WorkflowType {
  WORKFLOW_TYPE_UNSPECIFIED = 0;
  PRESUBMIT = 1;   // Runs on pull requests before merging.
  POSTSUBMIT = 2;  // Runs after commits are merged to the main branch.
  SCHEDULED = 3;   // Runs on a regular schedule (e.g., nightly, weekly).
  MANUAL = 4;      // Triggered manually (e.g., for bisecting).
}

// Defines the execution topology.
message ExecutionTopology {
  int32 num_hosts = 1 [(buf.validate.field).int32.gt = 0];             // REQUIRED: Number of hosts.
  int32 num_devices_per_host = 2 [(buf.validate.field).int32.gt = 0];  // REQUIRED: Number of devices per host.
}

// Defines how frequently the benchmark should be reviewed and/or updated 
// for retention purposes.
enum UpdateFrequency {
  UPDATE_FREQUENCY_UNSPECIFIED = 0;
  WEEKLY = 1;
  MONTHLY = 2;
  QUARTERLY = 3;
}

// Defines the configuration for a run on a specific hardware category.
message HardwareConfig {
  // REQUIRED: Specifies the primary hardware category needed (e.g., GPU_L4).
  HardwareCategory hardware_category = 1 [(buf.validate.field).enum = { not_in: [0]}];

  // REQUIRED: Defines the execution topology for the run.
  ExecutionTopology topology = 2 [(buf.validate.field).required = true];

  // REQUIRED: Specifies which workflows this config applies to.
  repeated WorkflowType workflow_type = 3 [(buf.validate.field).repeated.min_items = 1];

  // Optional: Hardware-specific runtime flags (e.g., --precision=fp16).
  repeated string runtime_flags = 4;

  // Optional: Resource specification.
  // If not provided, a default small runner for the category will be chosen.
  ResourceSpec resource_spec = 5;

  // Optional: Hardware-specific dependencies (e.g., "cuda", "tpu").
  repeated string pip_optional_dependencies = 6;
}

// Defines an HLO text dump file (.hlo) workload.
message HloWorkload {
  oneof source {
    option (buf.validate.oneof).required = true;

    // Relative path to a file within the source repository (e.g., "hlo/my_model.hlo").
    string relative_path = 1;

    // GCS path (gs://bucket/path/to/artifact) for larger artifacts.
    string gcs_path = 2;
  }
}

// Defines a stableHLO MLIR text file (.mlir) workload.
message StableHloWorkload {
  oneof source {
    option (buf.validate.oneof).required = true;
    
    // Relative path to a file within the source repository (e.g., "hlo/my_model.hlo").
    string relative_path = 1;

    // GCS path (gs://bucket/path/to/artifact) for larger artifacts.
    string gcs_path = 2;
  }
}

// Defines a runnable Bazel target workload.
message BazelTargetWorkload {

  // REQUIRED: Bazel target within the source repository (e.g., "//my:target").
  string execution_target = 1 [(buf.validate.field).string.min_len = 1];
}

// Defines a Python workload (i.e. pip-managed environment).
message PythonWorkload {
  // REQUIRED: The path to the Python script, relative to the repo root
  // (e.g., "benchmarks/my_script.py").
  string script_path = 1 [(buf.validate.field).string.min_len = 1];

  // REQUIRED: e.g., "3.11".
  string python_version = 2 [(buf.validate.field).string.min_len = 1];

  // Optional: Base dependencies that this workload always requires (e.g., "test").
  // Combined with hardware_config's pip_optional_dependencies.
  repeated string pip_optional_dependencies = 3;

  // Optional: The path to the pip project (the directory containing
  // pyproject.toml or requirements.txt).
  // If not provided, it defaults to the repository root.
  optional string pip_project_path = 4;
}

// Specifies the workload for the benchmark.
message WorkloadSpec {
  oneof workload {
    option (buf.validate.oneof).required = true;
    HloWorkload hlo_workload = 1;
    StableHloWorkload stablehlo_workload = 2;
    BazelTargetWorkload bazel_target = 3;
    PythonWorkload python_workload = 4;
  }

  // Optional: Base runtime flags (e.g., --model_name=...).
  // Combined with hardware_config's runtime_flags.
  repeated string runtime_flags = 5;
}

// Defines a specific benchmark configuration.
message BenchmarkConfig {
  // REQUIRED: A unique name for the benchmark (e.g., "resnet50_jax_train").
  string name = 1 [(buf.validate.field).string.min_len = 1];

  // REQUIRED: A brief description of the benchmark's purpose.
  string description = 2 [(buf.validate.field).string.min_len = 1];
 
  // REQUIRED: The owner or team responsible for the benchmark.
  string owner = 3 [(buf.validate.field).string.min_len = 1];

  // REQUIRED: The workload specification.
  WorkloadSpec workload = 4 [(buf.validate.field).required = true];

  // REQUIRED: List of hardware configurations.
  repeated HardwareConfig hardware_configs = 5 [(buf.validate.field).repeated.min_items = 1];

  // REQUIRED: How often this benchmark definition should be reviewed.
  UpdateFrequency update_frequency_policy = 6 [(buf.validate.field).enum = { not_in: [0]}];

  // Optional: GitHub labels for filtering or triggering workflows.
  repeated string github_labels = 7;

  // Optional: List of metrics to track.
  repeated MetricSpec metrics = 8;
}

// Represents a collection of benchmark configurations.
message BenchmarkSuite {
  repeated BenchmarkConfig benchmarks = 1;
}
